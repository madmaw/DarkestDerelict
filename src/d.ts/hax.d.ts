type PropType<TObj, TProp extends keyof TObj> = TObj[TProp];

interface ExtendedWebGLRenderingContext extends WebGLRenderingContext {
  cas: PropType<WebGLRenderingContext, 'canvas'>;
  drBuWih: PropType<WebGLRenderingContext, 'drawingBufferWidth'>;
  drBuHet: PropType<WebGLRenderingContext, 'drawingBufferHeight'>;
  acTee: PropType<WebGLRenderingContext, 'activeTexture'>;
  atShr: PropType<WebGLRenderingContext, 'attachShader'>;
  biAtLon: PropType<WebGLRenderingContext, 'bindAttribLocation'>;
  biFrr: PropType<WebGLRenderingContext, 'bindFramebuffer'>;
  biRer: PropType<WebGLRenderingContext, 'bindRenderbuffer'>;
  biTee: PropType<WebGLRenderingContext, 'bindTexture'>;
  blCor: PropType<WebGLRenderingContext, 'blendColor'>;
  blEqn: PropType<WebGLRenderingContext, 'blendEquation'>;
  blEqSee: PropType<WebGLRenderingContext, 'blendEquationSeparate'>;
  blFuc: PropType<WebGLRenderingContext, 'blendFunc'>;
  blFuSee: PropType<WebGLRenderingContext, 'blendFuncSeparate'>;
  buDaa: PropType<WebGLRenderingContext, 'bufferData'>;
  buSuDaa: PropType<WebGLRenderingContext, 'bufferSubData'>;
  chFrSts: PropType<WebGLRenderingContext, 'checkFramebufferStatus'>;
  clr: PropType<WebGLRenderingContext, 'clear'>;
  clCor: PropType<WebGLRenderingContext, 'clearColor'>;
  clDeh: PropType<WebGLRenderingContext, 'clearDepth'>;
  clStl: PropType<WebGLRenderingContext, 'clearStencil'>;
  coMak: PropType<WebGLRenderingContext, 'colorMask'>;
  coShr: PropType<WebGLRenderingContext, 'compileShader'>;
  coTeIm2D: PropType<WebGLRenderingContext, 'compressedTexImage2D'>;
  coTeSuIm2D: PropType<WebGLRenderingContext, 'compressedTexSubImage2D'>;
  crBur: PropType<WebGLRenderingContext, 'createBuffer'>;
  crFrr: PropType<WebGLRenderingContext, 'createFramebuffer'>;
  crPrm: PropType<WebGLRenderingContext, 'createProgram'>;
  crRer: PropType<WebGLRenderingContext, 'createRenderbuffer'>;
  crShr: PropType<WebGLRenderingContext, 'createShader'>;
  crTee: PropType<WebGLRenderingContext, 'createTexture'>;
  cuFae: PropType<WebGLRenderingContext, 'cullFace'>;
  deBur: PropType<WebGLRenderingContext, 'deleteBuffer'>;
  deFrr: PropType<WebGLRenderingContext, 'deleteFramebuffer'>;
  dePrm: PropType<WebGLRenderingContext, 'deleteProgram'>;
  deRer: PropType<WebGLRenderingContext, 'deleteRenderbuffer'>;
  deShr: PropType<WebGLRenderingContext, 'deleteShader'>;
  deTee: PropType<WebGLRenderingContext, 'deleteTexture'>;
  deFuc: PropType<WebGLRenderingContext, 'depthFunc'>;
  deMak: PropType<WebGLRenderingContext, 'depthMask'>;
  deRae: PropType<WebGLRenderingContext, 'depthRange'>;
  die: PropType<WebGLRenderingContext, 'disable'>;
  diVeAtAry: PropType<WebGLRenderingContext, 'disableVertexAttribArray'>;
  ene: PropType<WebGLRenderingContext, 'enable'>;
  enVeAtAry: PropType<WebGLRenderingContext, 'enableVertexAttribArray'>;
  fih: PropType<WebGLRenderingContext, 'finish'>;
  flh: PropType<WebGLRenderingContext, 'flush'>;
  frRer: PropType<WebGLRenderingContext, 'framebufferRenderbuffer'>;
  frTe2D: PropType<WebGLRenderingContext, 'framebufferTexture2D'>;
  frFae: PropType<WebGLRenderingContext, 'frontFace'>;
  geMip: PropType<WebGLRenderingContext, 'generateMipmap'>;
  geAcAtb: PropType<WebGLRenderingContext, 'getActiveAttrib'>;
  geAcUnm: PropType<WebGLRenderingContext, 'getActiveUniform'>;
  geAtShs: PropType<WebGLRenderingContext, 'getAttachedShaders'>;
  geAtLon: PropType<WebGLRenderingContext, 'getAttribLocation'>;
  geBuPar: PropType<WebGLRenderingContext, 'getBufferParameter'>;
  geCoAts: PropType<WebGLRenderingContext, 'getContextAttributes'>;
  geErr: PropType<WebGLRenderingContext, 'getError'>;
  geExn: PropType<WebGLRenderingContext, 'getExtension'>;
  geFrAtPar: PropType<WebGLRenderingContext, 'getFramebufferAttachmentParameter'>;
  gePar: PropType<WebGLRenderingContext, 'getParameter'>;
  gePrInLog: PropType<WebGLRenderingContext, 'getProgramInfoLog'>;
  gePrPar: PropType<WebGLRenderingContext, 'getProgramParameter'>;
  geRePar: PropType<WebGLRenderingContext, 'getRenderbufferParameter'>;
  geShInLog: PropType<WebGLRenderingContext, 'getShaderInfoLog'>;
  geShPar: PropType<WebGLRenderingContext, 'getShaderParameter'>;
  geShPrFot: PropType<WebGLRenderingContext, 'getShaderPrecisionFormat'>;
  geShSoe: PropType<WebGLRenderingContext, 'getShaderSource'>;
  geSuExs: PropType<WebGLRenderingContext, 'getSupportedExtensions'>;
  geTePar: PropType<WebGLRenderingContext, 'getTexParameter'>;
  geUnm: PropType<WebGLRenderingContext, 'getUniform'>;
  geUnLon: PropType<WebGLRenderingContext, 'getUniformLocation'>;
  geVeAtb: PropType<WebGLRenderingContext, 'getVertexAttrib'>;
  geVeAtOft: PropType<WebGLRenderingContext, 'getVertexAttribOffset'>;
  hit: PropType<WebGLRenderingContext, 'hint'>;
  isBur: PropType<WebGLRenderingContext, 'isBuffer'>;
  isCoLot: PropType<WebGLRenderingContext, 'isContextLost'>;
  isEnd: PropType<WebGLRenderingContext, 'isEnabled'>;
  isFrr: PropType<WebGLRenderingContext, 'isFramebuffer'>;
  isPrm: PropType<WebGLRenderingContext, 'isProgram'>;
  isRer: PropType<WebGLRenderingContext, 'isRenderbuffer'>;
  isShr: PropType<WebGLRenderingContext, 'isShader'>;
  isTee: PropType<WebGLRenderingContext, 'isTexture'>;
  liWih: PropType<WebGLRenderingContext, 'lineWidth'>;
  liPrm: PropType<WebGLRenderingContext, 'linkProgram'>;
  piSti: PropType<WebGLRenderingContext, 'pixelStorei'>;
  poOft: PropType<WebGLRenderingContext, 'polygonOffset'>;
  rePis: PropType<WebGLRenderingContext, 'readPixels'>;
  reSte: PropType<WebGLRenderingContext, 'renderbufferStorage'>;
  saCoe: PropType<WebGLRenderingContext, 'sampleCoverage'>;
  scr: PropType<WebGLRenderingContext, 'scissor'>;
  shSoe: PropType<WebGLRenderingContext, 'shaderSource'>;
  stFuc: PropType<WebGLRenderingContext, 'stencilFunc'>;
  stFuSee: PropType<WebGLRenderingContext, 'stencilFuncSeparate'>;
  stMak: PropType<WebGLRenderingContext, 'stencilMask'>;
  stMaSee: PropType<WebGLRenderingContext, 'stencilMaskSeparate'>;
  stOp: PropType<WebGLRenderingContext, 'stencilOp'>;
  stOpSee: PropType<WebGLRenderingContext, 'stencilOpSeparate'>;
  teIm2D: PropType<WebGLRenderingContext, 'texImage2D'>;
  tePaf: PropType<WebGLRenderingContext, 'texParameterf'>;
  tePai: PropType<WebGLRenderingContext, 'texParameteri'>;
  teSuIm2D: PropType<WebGLRenderingContext, 'texSubImage2D'>;
  un1f: PropType<WebGLRenderingContext, 'uniform1f'>;
  un1fv: PropType<WebGLRenderingContext, 'uniform1fv'>;
  un1i: PropType<WebGLRenderingContext, 'uniform1i'>;
  un1iv: PropType<WebGLRenderingContext, 'uniform1iv'>;
  un2f: PropType<WebGLRenderingContext, 'uniform2f'>;
  un2fv: PropType<WebGLRenderingContext, 'uniform2fv'>;
  un2i: PropType<WebGLRenderingContext, 'uniform2i'>;
  un2iv: PropType<WebGLRenderingContext, 'uniform2iv'>;
  un3f: PropType<WebGLRenderingContext, 'uniform3f'>;
  un3fv: PropType<WebGLRenderingContext, 'uniform3fv'>;
  un3i: PropType<WebGLRenderingContext, 'uniform3i'>;
  un3iv: PropType<WebGLRenderingContext, 'uniform3iv'>;
  un4f: PropType<WebGLRenderingContext, 'uniform4f'>;
  un4fv: PropType<WebGLRenderingContext, 'uniform4fv'>;
  un4i: PropType<WebGLRenderingContext, 'uniform4i'>;
  un4iv: PropType<WebGLRenderingContext, 'uniform4iv'>;
  unMa2fv: PropType<WebGLRenderingContext, 'uniformMatrix2fv'>;
  unMa3fv: PropType<WebGLRenderingContext, 'uniformMatrix3fv'>;
  unMa4fv: PropType<WebGLRenderingContext, 'uniformMatrix4fv'>;
  usPrm: PropType<WebGLRenderingContext, 'useProgram'>;
  vaPrm: PropType<WebGLRenderingContext, 'validateProgram'>;
  veAt1f: PropType<WebGLRenderingContext, 'vertexAttrib1f'>;
  veAt1fv: PropType<WebGLRenderingContext, 'vertexAttrib1fv'>;
  veAt2f: PropType<WebGLRenderingContext, 'vertexAttrib2f'>;
  veAt2fv: PropType<WebGLRenderingContext, 'vertexAttrib2fv'>;
  veAt3f: PropType<WebGLRenderingContext, 'vertexAttrib3f'>;
  veAt3fv: PropType<WebGLRenderingContext, 'vertexAttrib3fv'>;
  veAt4f: PropType<WebGLRenderingContext, 'vertexAttrib4f'>;
  veAt4fv: PropType<WebGLRenderingContext, 'vertexAttrib4fv'>;
  veAtPor: PropType<WebGLRenderingContext, 'vertexAttribPointer'>;
  vit: PropType<WebGLRenderingContext, 'viewport'>;
  biBur: PropType<WebGLRenderingContext, 'bindBuffer'>;
  drArs: PropType<WebGLRenderingContext, 'drawArrays'>;
  drEls: PropType<WebGLRenderingContext, 'drawElements'>;
}

interface ExtendedCanvasRenderingContext2D extends CanvasRenderingContext2D {
  cas: PropType<CanvasRenderingContext2D, 'canvas'>;
  glAa: PropType<CanvasRenderingContext2D, 'globalAlpha'>;
  glCOn: PropType<CanvasRenderingContext2D, 'globalCompositeOperation'>;
  fir: PropType<CanvasRenderingContext2D, 'filter'>;
  imSEd: PropType<CanvasRenderingContext2D, 'imageSmoothingEnabled'>;
  imSQy: PropType<CanvasRenderingContext2D, 'imageSmoothingQuality'>;
  stSe: PropType<CanvasRenderingContext2D, 'strokeStyle'>;
  fiSe: PropType<CanvasRenderingContext2D, 'fillStyle'>;
  shOX: PropType<CanvasRenderingContext2D, 'shadowOffsetX'>;
  shOY: PropType<CanvasRenderingContext2D, 'shadowOffsetY'>;
  shBr: PropType<CanvasRenderingContext2D, 'shadowBlur'>;
  shCr: PropType<CanvasRenderingContext2D, 'shadowColor'>;
  liWh: PropType<CanvasRenderingContext2D, 'lineWidth'>;
  liCp: PropType<CanvasRenderingContext2D, 'lineCap'>;
  liJn: PropType<CanvasRenderingContext2D, 'lineJoin'>;
  miLt: PropType<CanvasRenderingContext2D, 'miterLimit'>;
  liDOt: PropType<CanvasRenderingContext2D, 'lineDashOffset'>;
  fot: PropType<CanvasRenderingContext2D, 'font'>;
  teAn: PropType<CanvasRenderingContext2D, 'textAlign'>;
  teBe: PropType<CanvasRenderingContext2D, 'textBaseline'>;
  din: PropType<CanvasRenderingContext2D, 'direction'>;
  clp: PropType<CanvasRenderingContext2D, 'clip'>;
  crIDa: PropType<CanvasRenderingContext2D, 'createImageData'>;
  crLGt: PropType<CanvasRenderingContext2D, 'createLinearGradient'>;
  crPn: PropType<CanvasRenderingContext2D, 'createPattern'>;
  crRGt: PropType<CanvasRenderingContext2D, 'createRadialGradient'>;
  drFINd: PropType<CanvasRenderingContext2D, 'drawFocusIfNeeded'>;
  drIe: PropType<CanvasRenderingContext2D, 'drawImage'>;
  fil: PropType<CanvasRenderingContext2D, 'fill'>;
  fiTt: PropType<CanvasRenderingContext2D, 'fillText'>;
  geIDa: PropType<CanvasRenderingContext2D, 'getImageData'>;
  geLDh: PropType<CanvasRenderingContext2D, 'getLineDash'>;
  geTm: PropType<CanvasRenderingContext2D, 'getTransform'>;
  isPIPh: PropType<CanvasRenderingContext2D, 'isPointInPath'>;
  isPISe: PropType<CanvasRenderingContext2D, 'isPointInStroke'>;
  meTt: PropType<CanvasRenderingContext2D, 'measureText'>;
  puIDa: PropType<CanvasRenderingContext2D, 'putImageData'>;
  sae: PropType<CanvasRenderingContext2D, 'save'>;
  sce: PropType<CanvasRenderingContext2D, 'scale'>;
  seLDh: PropType<CanvasRenderingContext2D, 'setLineDash'>;
  seTm: PropType<CanvasRenderingContext2D, 'setTransform'>;
  ste: PropType<CanvasRenderingContext2D, 'stroke'>;
  stTt: PropType<CanvasRenderingContext2D, 'strokeText'>;
  trm: PropType<CanvasRenderingContext2D, 'transform'>;
  tre: PropType<CanvasRenderingContext2D, 'translate'>;
  arTo: PropType<CanvasRenderingContext2D, 'arcTo'>;
  bePh: PropType<CanvasRenderingContext2D, 'beginPath'>;
  beCTo: PropType<CanvasRenderingContext2D, 'bezierCurveTo'>;
  clRt: PropType<CanvasRenderingContext2D, 'clearRect'>;
  clPh: PropType<CanvasRenderingContext2D, 'closePath'>;
  ele: PropType<CanvasRenderingContext2D, 'ellipse'>;
  fiRt: PropType<CanvasRenderingContext2D, 'fillRect'>;
  liTo: PropType<CanvasRenderingContext2D, 'lineTo'>;
  moTo: PropType<CanvasRenderingContext2D, 'moveTo'>;
  quCTo: PropType<CanvasRenderingContext2D, 'quadraticCurveTo'>;
  ret: PropType<CanvasRenderingContext2D, 'rect'>;
  reTm: PropType<CanvasRenderingContext2D, 'resetTransform'>;
  ree: PropType<CanvasRenderingContext2D, 'restore'>;
  roe: PropType<CanvasRenderingContext2D, 'rotate'>;
  stRt: PropType<CanvasRenderingContext2D, 'strokeRect'>;
}